import com.thiosin.novus.buildsrc.Plugins

apply plugin: 'io.gitlab.arturbosch.detekt'

buildscript {
    repositories {
        google()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath Plugins.androidGradle
        classpath Plugins.kotlinGradle

        classpath Plugins.detektGradle
        classpath Plugins.hiltGradle
        classpath Plugins.jacocoGradle
        classpath Plugins.ktlintGradle
        classpath Plugins.safeArgsGradle
        classpath Plugins.versionGradle
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'

            freeCompilerArgs += '-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi'
            freeCompilerArgs += '-Xopt-in=kotlinx.coroutines.FlowPreview'
            freeCompilerArgs += '-Xopt-in=kotlin.Experimental'
            freeCompilerArgs += '-Xallow-jvm-ir-dependencies'
            freeCompilerArgs += '-progressive'

            jvmTarget = "1.8"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

detekt {
    // The directories where detekt looks for source files. Defaults to `files("src/main/java", "src/main/kotlin")`.
    input = files("app/src/main/java")
    config = files("$projectDir/config/detekt/detekt.yml")
//    baseline = file("$projectDir/config/detekt/baseline.xml")

    buildUponDefaultConfig = false
    disableDefaultRuleSets = false
    debug = false
    ignoreFailures = false
    ignoredBuildTypes = ["release"]
    ignoredFlavors = ["production"]
    ignoredVariants = ["productionRelease"]
    reports {
        xml {
            enabled = true
            destination = file("build/reports/detekt/detekt.xml")
        }
        html {
            enabled = true
            destination = file("build/reports/detekt/detekt.html")
        }
        txt {
            enabled = true
            destination = file("build/reports/detekt/detekt.txt")
        }
    }
    autoCorrect = true
}

tasks.withType(io.gitlab.arturbosch.detekt.Detekt).configureEach {
    exclude("**/network/json/**", "**/network/model/**")
}

task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, '.githooks/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}

tasks.getByPath(':app:preBuild').dependsOn installGitHook
